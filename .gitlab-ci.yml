#Using the latest node image for all the jobs needed
image: node:latest

stages:
  - Build
  - Test
  - deploy review
  - Deploy staging
  - Deploy production
  - Production tests

# Using cache to speed up the build 
cache:
# Using Key to cache the node_modules folder based on the branch
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
# Using variables to define the staging and production domains
variables:
  STAGING_DOMAIN : dedsec3-staging.surge.sh
  PRODUCTION_DOMAIN : dedsec3.surge.sh

build website:
  stage: Build
  script:
    - echo $CI_COMMIT_SHORT_SHA
    - npm install
    - npm install -g gatsby-cli
    - gatsby build
# Using stream editor to replace the version in the index.html file with the commit short sha    
    - sed -i "s/%%VERSION%%/$CI_COMMIT_SHORT_SHA/" ./public/index.html
# Using artifacts to save the build files    
  artifacts:
    paths:
      - ./public


test artifact:
# Using alpine image to test the artifact due to his small size
  image: alpine:latest
  stage: Test
#Do not use cache for this job  
  cache : {}
  script:
    - grep -q "Gatsby" ./public/index.html

test website:
  stage: Test
  script:
    - npm install 
    - npm install -g gatsby-cli
    - gatsby serve &
    - sleep 3
    - curl "http://localhost:9000" | grep -q "Gatsby"
    - curl "http://localhost:9000" | grep -q $CI_COMMIT_SHORT_SHA


Deploy review:
  stage: deploy review
  cache: {}
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://dedsec3-$CI_ENVIRONMENT_SLUG.surge.sh
  only:
    - merge_requests
  script:
    - npm install -g surge
    - surge --project ./public --domain dedsec3-$CI_ENVIRONMENT_SLUG.surge.sh


Deploy staging:
  stage: Deploy staging
  cache: {}
#Using environment to define the staging environment 
  environment:
    name: staging
    url: http://$STAGING_DOMAIN
  only:
    - main  
  script:
    - npm install -g surge
    - surge --project ./public --domain $STAGING_DOMAIN

Deploy production:
  stage: Deploy production
  cache: {}
  environment:
    name: production
    url: http://$PRODUCTION_DOMAIN
  # Integer a manual action to deploy to production and block the next job until the manual action is executed
  when: manual
  allow_failure: false  
# Only deploy to production if the branch is mentioned below 
  only:
    - main
  script:
    - npm install -g surge
    - surge --project ./public --domain $PRODUCTION_DOMAIN

Production tests:
  stage: Production tests 
  cache: {}
  only:
    - main
  script:
    - curl "http://dedsec3.surge.sh" | grep -q "Gatsby"    